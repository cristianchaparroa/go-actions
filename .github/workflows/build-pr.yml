name: QA - Peer Review

on:
  pull_request:
    branches: [ master ]
permissions:
  contents: read
  # Optional: allow read access to pull request. Use with `only-new-issues` option.
  # pull-requests: read
jobs:

  build:
    name: Build
    runs-on: ubuntu-latest
    steps:

    - name: Set up Go 1.13
      uses: actions/setup-go@v1
      with:
        go-version: 1.13
      id: go

    - name: Check out code into the Go module directory
      uses: actions/checkout@v2

    - name: Cache Go modules
      uses: actions/cache@preview
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-build-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.OS }}-build-${{ env.cache-name }}-
          ${{ runner.OS }}-build-
          ${{ runner.OS }}-

    - name: Get dependencies
      env:
        GOPROXY: "https://proxy.golang.org"
      run: go mod tidy

    - name: Run golangci-lint
      run: |
        $(go env GOPATH)/bin/golangci-lint run --issues-exit-code=0 --out-format=json > lint.json
        jq '[.Issues[] | {file: .Pos.Filename, line: .Pos.Line, title: .FromLinter, message: .Text}]' lint.json > ./annotations.json
        cat ./annotations.json

    - name: Annotate
      if: always()
      uses: yuzutech/annotations-action@v0.3.0
      with:
      repo-token: "${{ secrets.GA_TOKEN }}"
      input: ./annotations.json
        
    - name: Build
      run: go build -v .
    
        
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Set up Go
        uses: actions/setup-go@v1
        with:
          go-version: 1.12

      - name: Check out code
        uses: actions/checkout@v1

      - name: coverage
        run: |
            go test -coverprofile=c.out
            go tool cover -html=c.out -o coverage.html
            cat c.out >> coverage.txt
      
      - name: Upload Coverage report to CodeCov
        uses: codecov/codecov-action@v1.0.0
        with:
          token: ${{secrets.CODECOV_TOKEN}}
          file: ./coverage.txt 
