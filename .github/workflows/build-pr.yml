name: QA - Peer Review

on:
  pull_request:
    branches: [ master ]

jobs:

  build:
    name: Build
    runs-on: ubuntu-latest
    steps:

    - name: Set up Go 1.13
      uses: actions/setup-go@v1
      with:
        go-version: 1.13
      id: go

    - name: Check out code into the Go module directory
      uses: actions/checkout@v2

    - name: Cache Go modules
      uses: actions/cache@preview
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-build-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.OS }}-build-${{ env.cache-name }}-
          ${{ runner.OS }}-build-
          ${{ runner.OS }}-

    - name: Get dependencies
      env:
        GOPROXY: "https://proxy.golang.org"
      run: go mod tidy

    - name: Install golangci-lint
      run: |
        curl -sfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh| sh -s -- -b $(go env GOPATH)/bin v1.18.0

    - name: Run golangci-lint
      run: |
        $(go env GOPATH)/bin/golangci-lint run --issues-exit-code=0 --out-format=json > lint.json
        jq '[.Issues[] | {path: .Pos.Filename, start_line: .Pos.Line, end_line: .Pos.Line, start_column: .Pos.Column, end_column: .Pos.Column , title: .FromLinter, message: .Text, raw_details: .Text, "annotation_level": "warning"}]' lint.json > ./annotations.json
        cat ./annotations.json

    - name: Annotate
      uses: yuzutech/annotations-action@v0.3.0
      with:
        repo-token: "${{ secrets.GITHUB_TOKEN }}"
        input: './annotations.json'

    - name: Write comments
      uses: actions/github-script@v2
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        script: |
          const fs = require('fs');
          let rawdata = fs.readFileSync('./annotations.json', 'utf-8');
          let issues = JSON.parse(rawdata);
          console.log(issues);

          for (const issue of issues) {
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: issue.message,
              position: issue.start_line,
              path: issue.path
            })
          }


    - name: Build
      run: go build -v .
    
        
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Set up Go
        uses: actions/setup-go@v1
        with:
          go-version: 1.12

      - name: Check out code
        uses: actions/checkout@v1

      - name: coverage
        run: |
            go test -coverprofile=c.out
            go tool cover -html=c.out -o coverage.html
            cat c.out >> coverage.txt
      
      - name: Upload Coverage report to CodeCov
        uses: codecov/codecov-action@v1.0.0
        with:
          token: ${{secrets.CODECOV_TOKEN}}
          file: ./coverage.txt
